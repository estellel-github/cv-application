--------------------------
Path: App.jsx

import { EducationView } from "./components/Output/EducationView";
import { GeneralInfoView } from "./components/Output/GeneralInfoView";
import { ExperienceView } from "./components/Output/ExperienceView";
import { Preview } from "./components/Preview/Preview";
import { CVProvider } from "./CVContext";
import "./App.css";

function App() {
  return (
    <CVProvider>
      <div className="app-container">
        <div className="form-section">
          <GeneralInfoView />
          <EducationView />
          <ExperienceView />
        </div>
        <div className="preview-section">
          <Preview />
        </div>
      </div>
    </CVProvider>
  );
}

export default App;

--------------------------
Path: index.css

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 600px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }

  a:hover {
    color: #747bff;
  }

  button {
    background-color: #f9f9f9;
  }
}
--------------------------
Path: CVContext.jsx

import { createContext, useState } from "react";

const CVContext = createContext();

function CVProvider({ children }) {
  const [generalInfo, setGeneralInfo] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    address: "",
  });

  const [educationList, setEducationList] = useState([]);
  const [currentEducation, setCurrentEducation] = useState({
    id: null,
    school: "",
    location: "",
    degree: "",
    startDate: "",
    endDate: "",
  });

  const handleEditEducation = (id) => {
    const educationToEdit = educationList.find((edu) => edu.id === id);
    setCurrentEducation(educationToEdit);
  };

  const handleSaveEducation = (updatedEducation) => {
    if (updatedEducation.id) {
      setEducationList((prevList) =>
        prevList.map((edu) =>
          edu.id === updatedEducation.id ? updatedEducation : edu
        )
      );
    } else {
      setEducationList((prevList) => [
        ...prevList,
        { ...updatedEducation, id: Date.now().toString() },
      ]);
    }
    handleCancelEditEducation();
  };

  const handleCancelEditEducation = () => {
    setCurrentEducation({
      id: null,
      school: "",
      location: "",
      degree: "",
      startDate: "",
      endDate: "",
    });
  };

  const handleDeleteEducation = (id) => {
    setEducationList((prevList) => prevList.filter((edu) => edu.id !== id));
    handleCancelEditEducation();
  };

  const [experienceList, setExperienceList] = useState([]);
  const [currentExperience, setCurrentExperience] = useState({
    id: null,
    company: "",
    location: "",
    position: "",
    startDate: "",
    endDate: "",
    description: "",
  });

  const handleEditExperience = (id) => {
    const experienceToEdit = experienceList.find((exp) => exp.id === id);
    setCurrentExperience(experienceToEdit);
  };

  const handleSaveExperience = (updatedExperience) => {
    if (updatedExperience.id) {
      setExperienceList((prevList) =>
        prevList.map((exp) =>
          exp.id === updatedExperience.id ? updatedExperience : exp
        )
      );
    } else {
      setExperienceList((prevList) => [
        ...prevList,
        { ...updatedExperience, id: Date.now().toString() },
      ]);
    }
    handleCancelEditExperience();
  };

  const handleCancelEditExperience = () => {
    setCurrentExperience({
      id: null,
      company: "",
      location: "",
      position: "",
      startDate: "",
      endDate: "",
      description: "",
    });
  };

  const handleDeleteExperience = (id) => {
    setExperienceList((prevList) => prevList.filter((exp) => exp.id !== id));
    handleCancelEditExperience();
  };

  const value = {
    generalInfo,
    setGeneralInfo,
    educationList,
    setEducationList,
    currentEducation,
    setCurrentEducation,
    handleEditEducation,
    handleSaveEducation,
    handleCancelEditEducation,
    handleDeleteEducation,
    experienceList,
    setExperienceList,
    currentExperience,
    setCurrentExperience,
    handleEditExperience,
    handleSaveExperience,
    handleCancelEditExperience,
    handleDeleteExperience,
  };

  return <CVContext.Provider value={value}>{children}</CVContext.Provider>;
}

export { CVProvider, CVContext };

--------------------------
Path: App.css

body {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  min-height: 100dvh;
  margin: 0;
  background-color: #f5f5f5;
}

.app-container {
  display: flex;
  gap: 2rem;
  min-width: 1200px;
  width: 100%;
  margin-top: 2rem;
  padding: 2rem;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

.form-section {
  flex: 2;
  padding: 1.5rem;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
}

.preview-section {
  flex: 3;
  padding: 1.5rem;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
}

h1 {
  font-size: 1.8em;
  color: #333333;
  margin-bottom: 1rem;
}

h2 {
  font-size: 1.6em;
  color: #444444;
  margin-bottom: 1rem;
}

h3 {
  font-size: 1.4em;
  color: #555555;
  margin-bottom: 0.5rem;
  display: flex;
  align-items: center;
}

h3:before {
  content: "âœ¨";
  margin-right: 0.5rem;
  font-size: 1.2em;
}

label {
  font-weight: 500;
  color: #333;
}

input,
textarea {
  width: 100%;
  padding: 0.5rem;
  margin-top: 0.3rem;
  margin-bottom: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1em;
}

textarea {
  resize: vertical;
  height: 80px;
}

button {
  border: none;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.2s;
}

button[type="submit"] {
  background-color: #4caf50;
  color: white;
  margin-right: 0.5rem;
}

button[type="submit"]:hover {
  background-color: #45a049;
}

button[type="button"] {
  background-color: #2196f3;
  color: white;
}

button[type="button"]:hover {
  background-color: #1e88e5;
}

button[type="button"].delete {
  background-color: #f44336;
}

button[type="button"].delete:hover {
  background-color: #e53935;
}

.preview-section h2 {
  font-size: 1.6em;
  color: #222;
}

.preview-section section {
  margin-bottom: 1.5rem;
}

.preview-section section p {
  margin: 0.5rem 0;
  line-height: 1.4;
}

.preview-section strong {
  font-weight: 600;
  color: #333;
}
--------------------------
Path: UseCV.jsx

import { useContext } from "react";
import { CVContext } from "./CVContext";

const useCV = () => useContext(CVContext);

export { useCV };

--------------------------
Path: assets/react.svg

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
--------------------------
Path: components/Preview/Preview.jsx

import { useCV } from "../../UseCV";

function Preview() {
  const { generalInfo, educationList, experienceList } = useCV();

  return (
    <>
      <div>
        <section>
          <p className="fullName">{generalInfo.fullName}</p>
          <div className="contactDetails">
            <div className="email">{generalInfo.email}</div>
            <div className="phone">{generalInfo.phoneNumber}</div>
            <div className="address">{generalInfo.address}</div>
          </div>
        </section>
        <section>
          <h3>Education</h3>
          {educationList.map((edu) => (
            <div key={edu.id}>
              <p>
                <strong>{edu.school}</strong> - {edu.degree}
              </p>
              <p>
                <em>{edu.location}</em>
              </p>
              <p>
                From {edu.startDate} {edu.endDate ? `to ${edu.endDate}` : ""}
              </p>
            </div>
          ))}
        </section>
        <section>
          <h3>Experience</h3>
          {experienceList.map((exp) => (
            <div key={exp.id}>
              <p>
                <strong>{exp.company}</strong> - {exp.position}
              </p>
              <p>
                <em>{exp.location}</em>
              </p>
              <p>
                {exp.startDate} {exp.endDate ? `to ${exp.endDate}` : ""}
              </p>
              <p>{exp.description}</p>
            </div>
          ))}
        </section>
      </div>
    </>
  );
}

export { Preview };

--------------------------
Path: components/Output/ExperienceView.jsx

import { useState } from "react";
import ExperienceForm from "../Forms/ExperienceForm";
import { useCV } from "../../UseCV";

function ExperienceView() {
  const { experienceList, handleEditExperience, handleDeleteExperience } =
    useCV();

  const [isEditing, setIsEditing] = useState(false);
  const [editId, setEditId] = useState(null);

  const handleAddClick = () => {
    setEditId(null);
    setIsEditing(true);
  };

  const handleEditClick = (id) => {
    handleEditExperience(id);
    setEditId(id);
    setIsEditing(true);
  };

  const handleSaveClick = () => {
    setIsEditing(false);
    setEditId(null);
  };

  const handleCancelClick = () => {
    setIsEditing(false);
    setEditId(null);
  };

  return (
    <div>
      <h1>Experience</h1>
      {!isEditing ? (
        <>
          <ul>
            {experienceList.map((exp) => (
              <li key={exp.id}>
                <strong>{exp.company}</strong> - {exp.position}
                <br />
                <em>{exp.location}</em>
                <br />
                {exp.startDate} {exp.endDate ? `to ${exp.endDate}` : ""}
                <br />
                {exp.description}
                <button onClick={() => handleEditClick(exp.id)}>Edit</button>
                <button onClick={() => handleDeleteExperience(exp.id)}>
                  Delete
                </button>
              </li>
            ))}
          </ul>
          <button onClick={handleAddClick}>Add Experience</button>
        </>
      ) : (
        <ExperienceForm
          editId={editId}
          onSave={handleSaveClick}
          onCancel={handleCancelClick}
        />
      )}
    </div>
  );
}

export { ExperienceView };

--------------------------
Path: components/Output/EducationView.jsx

import { useState } from "react";
import EducationForm from "../Forms/EducationForm";
import { useCV } from "../../UseCV";

function EducationView() {
  const { educationList, handleEditEducation, handleDeleteEducation } = useCV();
  const [isEditing, setIsEditing] = useState(false);
  const [editId, setEditId] = useState(null);

  const handleAddClick = () => {
    setEditId(null);
    setIsEditing(true);
  };

  const handleEditClick = (id) => {
    handleEditEducation(id);
    setEditId(id);
    setIsEditing(true);
  };

  const handleSaveClick = () => {
    setIsEditing(false);
    setEditId(null);
  };

  const handleCancelClick = () => {
    setIsEditing(false);
    setEditId(null);
  };

  return (
    <div>
      <h1>Education</h1>
      {!isEditing ? (
        <>
          <ul>
            {educationList.map((edu) => (
              <li key={edu.id}>
                <strong>{edu.school}</strong> - {edu.degree}
                <br />
                <em>{edu.location}</em>
                <br />
                From {edu.startDate} {edu.endDate ? `to ${edu.endDate}` : ""}
                <br />
                <button onClick={() => handleEditClick(edu.id)}>Edit</button>
                <button onClick={() => handleDeleteEducation(edu.id)}>
                  Delete
                </button>
              </li>
            ))}
          </ul>
          <button onClick={handleAddClick}>Add Education</button>
        </>
      ) : (
        <EducationForm
          editId={editId}
          onSave={handleSaveClick}
          onCancel={handleCancelClick}
        />
      )}
    </div>
  );
}

export { EducationView };

--------------------------
Path: components/Output/GeneralInfoView.jsx

import { GeneralInfoForm } from "../Forms/GeneralInfoForm";
import { useCV } from "../../UseCV";

function GeneralInfoView() {
  const { generalInfo, setGeneralInfo } = useCV();

  return (
    <div>
      <h1>General Info</h1>
      <GeneralInfoForm formData={generalInfo} setFormData={setGeneralInfo} />
    </div>
  );
}

export { GeneralInfoView };

--------------------------
Path: components/Forms/EducationForm.jsx

import { useCV } from "../../UseCV";
import { useEffect } from "react";

function EducationForm({ editId, onSave, onCancel }) {
  const { currentEducation, setCurrentEducation, handleSaveEducation } =
    useCV();

  useEffect(() => {
    if (!editId) {
      setCurrentEducation({
        id: null,
        school: "",
        location: "",
        degree: "",
        startDate: "",
        endDate: "",
      });
    }
  }, [editId, setCurrentEducation]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCurrentEducation((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    handleSaveEducation(currentEducation);
    onSave(currentEducation);
  };

  return (
    <div>
      <h3>{editId ? "Edit Education" : "Add Education"}</h3>
      <form onSubmit={handleSubmit}>
        <div>
          <label>School</label>
          <input
            type="text"
            name="school"
            value={currentEducation.school}
            onChange={handleChange}
            placeholder="Enter school name"
          />
        </div>
        <div>
          <label>Location (optional)</label>
          <input
            type="text"
            name="location"
            value={currentEducation.location}
            onChange={handleChange}
            placeholder="Enter location"
          />
        </div>
        <div>
          <label>Degree</label>
          <input
            type="text"
            name="degree"
            value={currentEducation.degree}
            onChange={handleChange}
            placeholder="Enter degree"
          />
        </div>
        <div>
          <label>Start Date (optional)</label>
          <input
            type="date"
            name="startDate"
            value={currentEducation.startDate}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>End Date (optional)</label>
          <input
            type="date"
            name="endDate"
            value={currentEducation.endDate}
            onChange={handleChange}
          />
        </div>
        <button type="submit">{editId ? "Save" : "Add"}</button>
        <button type="button" onClick={onCancel}>
          Cancel
        </button>
      </form>
    </div>
  );
}

export default EducationForm;

--------------------------
Path: components/Forms/GeneralInfoForm.jsx

import { useCV } from "../../UseCV";

function GeneralInfoForm() {
  const { generalInfo, setGeneralInfo } = useCV();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setGeneralInfo((prevData) => ({ ...prevData, [name]: value }));
  };

  return (
    <form>
      <div>
        <label>Full Name</label>
        <input
          type="text"
          name="fullName"
          value={generalInfo.fullName}
          onChange={handleChange}
          placeholder="Enter full name"
        />
      </div>
      <div>
        <label>Email</label>
        <input
          type="email"
          name="email"
          value={generalInfo.email}
          onChange={handleChange}
          placeholder="Enter email"
        />
      </div>
      <div>
        <label>Phone Number</label>
        <input
          type="tel"
          name="phoneNumber"
          value={generalInfo.phoneNumber}
          onChange={handleChange}
          placeholder="Enter phone number"
        />
      </div>
      <div>
        <label>Address</label>
        <input
          type="text"
          name="address"
          value={generalInfo.address}
          onChange={handleChange}
          placeholder="Enter address"
        />
      </div>
    </form>
  );
}

export { GeneralInfoForm };

--------------------------
Path: components/Forms/ExperienceForm.jsx

import { useCV } from "../../UseCV";
import { useEffect } from "react";

function ExperienceForm(editId, onSave, onCancel) {
  const { currentExperience, setCurrentExperience, handleSaveExperience } =
    useCV();

  useEffect(() => {
    if (!editId) {
      setCurrentExperience({
        id: null,
        company: "",
        location: "",
        position: "",
        startDate: "",
        endDate: "",
        description: "",
      });
    }
  }, [editId, setCurrentExperience]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCurrentExperience((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    handleSaveExperience(currentExperience);
    onSave(currentExperience);
  };

  return (
    <div>
      <h3>{editId ? "Edit Experience" : "Add Experience"}</h3>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Company</label>
          <input
            type="text"
            name="company"
            value={currentExperience.company}
            onChange={handleChange}
            placeholder="Enter company name"
          />
        </div>
        <div>
          <label>Location (optional)</label>
          <input
            type="text"
            name="location"
            value={currentExperience.location}
            onChange={handleChange}
            placeholder="Enter location"
          />
        </div>
        <div>
          <label>Position</label>
          <input
            type="text"
            name="position"
            value={currentExperience.position}
            onChange={handleChange}
            placeholder="Enter position"
          />
        </div>
        <div>
          <label>Start Date (optional)</label>
          <input
            type="date"
            name="startDate"
            value={currentExperience.startDate}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>End Date (optional)</label>
          <input
            type="date"
            name="endDate"
            value={currentExperience.endDate}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>Description (optional)</label>
          <textarea
            name="description"
            value={currentExperience.description}
            onChange={handleChange}
            placeholder="Describe your responsibilities"
          />
        </div>
        <button type="submit">{editId ? "Save" : "Add"}</button>
        <button type="button" onClick={onCancel}>
          Cancel
        </button>
      </form>
    </div>
  );
}

export { ExperienceForm };

--------------------------
Path: combined.txt


--------------------------
Path: sampleData.json

{
  "generalInfo": {
    "fullName": "Jane Doe",
    "email": "jane.doe@example.com",
    "phoneNumber": "+1 (555) 123-4567",
    "address": "123 Main St, Springfield"
  },
  "educationList": [
    {
      "id": "1",
      "school": "Springfield University",
      "location": "Springfield",
      "degree": "Bachelor of Science in Computer Science",
      "startDate": "2016-09-01",
      "endDate": "2020-06-01"
    },
    {
      "id": "2",
      "school": "Tech Institute of Metropolis",
      "location": "Metropolis",
      "degree": "Master of Science in Data Science",
      "startDate": "2020-09-01",
      "endDate": "2022-05-01"
    }
  ],
  "experienceList": [
    {
      "id": "1",
      "company": "Tech Solutions Inc.",
      "location": "Metropolis",
      "position": "Software Developer",
      "startDate": "2020-07-01",
      "endDate": "2023-08-01",
      "description": "Developed and optimized web applications, focusing on frontend performance and user experience."
    },
    {
      "id": "2",
      "company": "Innovatech Corp.",
      "location": "Springfield",
      "position": "Data Analyst",
      "startDate": "2023-09-01",
      "endDate": "",
      "description": "Analyzes and visualizes data trends to assist in product development and business decision-making."
    }
  ]
}
--------------------------
Path: main.jsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

